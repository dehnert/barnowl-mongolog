#!/usr/bin/python

import collections
import datetime
import json
import re
import sys

def template_formatter(template):
    def do_format(record):
        return template % collections.defaultdict(str, record)
    return do_format

def format_style_default(record):
    record = collections.defaultdict(str, record)
    template = ("%(class)s / %(instance)s / %(fmtauth)s: %(sender)s"
        + "  %(fmttime)s (%(zsig)s) / %(hostname)s" + "\n"
        + "    %(indented_body)s"
    )
    body = record['body']
    # replace newline followed by anything with
    # newline plus four spaces and that thing.
    body = re.sub(r'\n(.)', r'\n    \1', body)
    # Trim trailing newlines.
    body = re.sub(r'\n*$', '', body)
    record['fmtauth'] = record['auth'] and "AUTH" or "UNAUTH"
    record['indented_body'] = body
    return template % record

formats = {
    'log': template_formatter(
"""
Class: %(class)s Instance: %(instance)s
Time: %(fmttime)s Host: %(hostname)s
From: %(zsig)s <%(sender)s>

%(body)s
"""),
    'style:default': format_style_default,
}


if __name__ == "__main__":
    disp_format = "log"
    if len(sys.argv) == 2:
        disp_format = sys.argv[1]
    if disp_format not in formats:
        print >>sys.stderr, ("Format %s not recognized" % (disp_format, ))
        sys.exit(1)
    for line in sys.stdin:
        try:
            record = json.loads(line)
            seconds = record['time']['$date'] / 1000
            record['fmttime'] = datetime.datetime.fromtimestamp(seconds)
            print formats[disp_format](record)
        except ValueError, e:
            if str(e) == "No JSON object could be decoded":
                print >>sys.stderr, "Invalid row: '%s'" % (line.strip(), )
            else:
                raise
